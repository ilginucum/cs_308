@model e_commerce.Models.SalesViewModel

@{
    ViewData["Title"] = "Sales Management";
    Layout = "_Layout";

    var productsWithoutPrice = Model.Products?.Where(p => p.Price == 0.0M) ?? new List<e_commerce.Models.Product>();
    var productsWithPrice = Model.Products?.Where(p => p.Price > 0.0M) ?? new List<e_commerce.Models.Product>();
    bool showCalculateSection = Model.FilteredOrders != null;
}

<div class="product-management-container">
    @if (ViewBag.SuccessMessage != null)
    {
        <div class="alert alert-success text-center" style="background-color: #dc7986; color: white; border: none; border-radius: 10px;">
            @ViewBag.SuccessMessage
        </div>
    }
    <div class="dashboard-header">
        <h2>Sales Management</h2>
    </div>

    <div class="action-cards">
        <a asp-action="ProductsAwaitingPrice" class="action-card create">
            <i class="bi bi-hourglass-split"></i>
            <span>Products Awaiting Price</span>
        </a>
        <a asp-action="ProductsWithPrice" class="action-card invoices">
            <i class="bi bi-cash-coin"></i>
            <span>Products with Price Set</span>
        </a>
        <a asp-action="RefundRequests" class="action-card comments">
            <i class="bi bi-arrow-counterclockwise"></i>
            <span>Refund Requests</span>
        </a>
    </div>

    <!-- Calculate Profit Block -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card custom-card">
                <div class="card-header text-white" style="background-color: #952735;">
                    <h4 class="mb-0 text-center">
                        <button class="header-button" id="toggleCalculateSection">Calculate Profit / Display Invoice</button>
                    </h4>
                </div>
                <div class="card-body" id="calculateSection" style="@(showCalculateSection ? "block" : "none")">
                    <form asp-action="CalculateProfit" method="post" class="mb-4">
                        <div class="row">
                            <div class="col-md-3">
                                <label for="startDate" class="form-label">Start Date:</label>
                                <input type="date" id="startDate" name="startDate" class="form-control" 
                                       required value="@(Model.StartDate?.ToString("yyyy-MM-dd"))" />
                            </div>
                            <div class="col-md-3">
                                <label for="endDate" class="form-label">End Date:</label>
                                <input type="date" id="endDate" name="endDate" class="form-control" 
                                       required value="@(Model.EndDate?.ToString("yyyy-MM-dd"))" />
                            </div>
                            <div class="col-md-3 d-flex align-items-end">
                                <button type="submit" class="btn custom-btn-primary w-100">Calculate</button>
                            </div>
                            <div class="col-md-3 d-flex align-items-end">
                                <button type="button" id="resetDates" class="btn btn-secondary w-100">Reset Dates</button>
                            </div>
                        </div>
                    </form>

                    @if (Model.FilteredOrders != null)
                    {
                        <div class="results-summary text-center mt-3">
                            <h4>Total Revenue: @Model.TotalRevenue.ToString("C")</h4>
                            <h4>Profit/Loss: @Model.ProfitLoss.ToString("C")</h4>
                        </div>
                        <div class="action-buttons text-center mt-3">
                            <button class="btn btn-secondary me-2" id="toggleDetails">Details</button>
                            <button class="btn btn-primary" id="toggleChart">Chart</button>
                        </div>

                        <div id="detailsSection" style="display: none;">
                            <h5 class="text-center mt-3">Filtered Orders</h5>
                            <div class="table-responsive">
                                <table class="table custom-table">
                                    <thead>
                                        <tr>
                                            <th>Order ID</th>
                                            <th>User ID</th>
                                            <th>Total Amount</th>
                                            <th>Order Date</th>
                                            <th>Display Invoices</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var order in Model.FilteredOrders)
                                        {
                                            <tr>
                                                <td>@order.Id</td>
                                                <td>@order.UserId</td>
                                                <td>@order.TotalAmount.ToString("C")</td>
                                                <td>@order.OrderDate.ToShortDateString()</td>
                                                <td>
                                                    <a href="@Url.Action("GenerateInvoicePDF", "Sales", new { id = order.Id })"
                                                        class="btn btn-primary btn-sm">
                                                        Download PDF
                                                    </a>
                                                    <button class="btn btn-secondary btn-sm"
                                                        onclick="printInvoice('@Url.Action("GenerateInvoicePDF", "Sales", new { id = order.Id, download = false })')">
                                                        Print
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <div id="chartSection" style="display: none;">
                            <div class="chart-container">
                                <canvas id="profitLossChart"></canvas>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <style>
        .page-title {
            color: #010101;
            font-weight: bold;
        }

        .product-management-container {
            padding: 20px;
            background-color: #f8f9fa;
        }

        .dashboard-header {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            margin-bottom: 20px;
        }

        .dashboard-header h2 {
            color: #2c3e50;
            margin: 0;
            font-size: 24px;
            font-weight: 600;
        }

        .action-cards {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin-bottom: 25px;
        }

        .action-card {
            background: white;
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            text-decoration: none;
            color: #2c3e50;
            transition: transform 0.2s, box-shadow 0.2s;
            border: 1px solid #e9ecef;
        }

        .action-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            text-decoration: none;
        }

        .action-card i {
            font-size: 24px;
            margin-bottom: 10px;
            display: block;
        }

        .create {
            background-color: #be3144;
            color: white;
        }

        .invoices {
            background-color: #2ecc71;
            color: white;
        }

        .comments {
            background-color: #3498db;
            color: white;
        }

        .custom-card {
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 100%;
        }

        #toggleCalculateSection {
            background-color: #952735;
            color: white;
            border: none;
            font-size: 20px;
            padding: 10px;
            cursor: pointer;
            width: 100%;
        }

        .custom-btn-primary {
            background-color: #be3144;
            color: white;
            border: none;
        }

        .custom-btn-primary:hover {
            background-color: #952735;
            color: white;
        }

        #chartSection {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            margin-top: 30px !important;
            margin-bottom: 30px;
            padding: 20px;
            height: 500px;
        }

        .chart-container {
            position: relative;
            height: 100%;
            width: 100%;
        }

        .table.custom-table {
            margin-top: 20px;
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
        }

        .table.custom-table thead th {
            background-color: #f8f9fa;
            border-bottom: 2px solid #dee2e6;
            color: #495057;
            font-weight: 600;
        }

        .table.custom-table tbody tr:hover {
            background-color: #f8f9fa;
        }
    </style>

    @section Scripts {
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // Get the date inputs
                const startDateInput = document.getElementById('startDate');
                const endDateInput = document.getElementById('endDate');
                
                // Check if we have stored dates in localStorage
                const storedStartDate = localStorage.getItem('salesStartDate');
                const storedEndDate = localStorage.getItem('salesEndDate');
                
                // If we have stored dates and no model dates, use the stored dates
                if (storedStartDate && !startDateInput.value) {
                    startDateInput.value = storedStartDate;
                }
                if (storedEndDate && !endDateInput.value) {
                    endDateInput.value = storedEndDate;
                }
                
                // Store dates when form is submitted
                document.querySelector('form').addEventListener('submit', function() {
                    localStorage.setItem('salesStartDate', startDateInput.value);
                    localStorage.setItem('salesEndDate', endDateInput.value);
                });
                
                // Reset dates button handler
                document.getElementById('resetDates').addEventListener('click', function() {
                    // Clear the form
                    startDateInput.value = '';
                    endDateInput.value = '';
                    
                    // Clear localStorage
                    localStorage.removeItem('salesStartDate');
                    localStorage.removeItem('salesEndDate');
                    
                    // Hide only the results sections while keeping the input form visible
                    let chartSection = document.getElementById('chartSection');
                    let detailsSection = document.getElementById('detailsSection');
                    
                    if (chartSection) {
                        chartSection.style.display = 'none';
                        if (window.myChart) {
                            window.myChart.destroy();
                        }
                    }
                    
                    if (detailsSection) {
                        detailsSection.style.display = 'none';
                    }
                    
                    // Hide the results summary
                    const resultsSummary = document.querySelector('.results-summary');
                    if (resultsSummary) {
                        resultsSummary.style.display = 'none';
                    }
                    
                    // Hide the action buttons
                    const actionButtons = document.querySelector('.action-buttons');
                    if (actionButtons) {
                        actionButtons.style.display = 'none';
                    }
                    
                    // Optional: Scroll to top of the form
                    document.querySelector('.card-header').scrollIntoView({ behavior: 'smooth' });
                });
            });

            document.getElementById("toggleCalculateSection").addEventListener("click", function () {
                let section = document.getElementById("calculateSection");
                section.style.display = (section.style.display === "none" || section.style.display === "") ? "block" : "none";
                section.scrollIntoView({ behavior: 'smooth' });
            });

            document.getElementById("toggleDetails")?.addEventListener("click", function () {
                let detailsSection = document.getElementById("detailsSection");
                detailsSection.style.display = (detailsSection.style.display === "none" || detailsSection.style.display === "") ? "block" : "none";
            });

            document.getElementById("toggleChart")?.addEventListener("click", function () {
                let chartSection = document.getElementById("chartSection");
                chartSection.style.display = (chartSection.style.display === "none" || chartSection.style.display === "") ? "block" : "none";

                if (chartSection.style.display === "block") {
                    // Check if we need to reinitialize the chart
                    if (window.myChart) {
                        window.myChart.destroy();
                    }

                    // Get the monthly data from the model
                    var monthlyData = @Html.Raw(Json.Serialize(Model.MonthlyFinancialData ?? new List<SalesViewModel.MonthlyData>()));

                    // Prepare the data for the chart
                    var months = monthlyData.map(d => {
                        var date = new Date(d.month);
                        return date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });
                    });
                    
                    var revenues = monthlyData.map(d => d.revenue);
                    var costs = monthlyData.map(d => d.cost);
                    var profits = monthlyData.map(d => d.profit);

                    // Professional color scheme
                    const colors = {
                        revenue: {
                            fill: 'rgba(65, 131, 215, 0.7)',
                            border: 'rgb(65, 131, 215)'
                        },
                        cost: {
                            fill: 'rgba(231, 76, 60, 0.7)',
                            border: 'rgb(231, 76, 60)'
                        },
                        profit: {
                            fill: 'rgba(46, 204, 113, 0.7)',
                            border: 'rgb(46, 204, 113)'
                        }
                    };

                    var ctx = document.getElementById('profitLossChart').getContext('2d');
                    window.myChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: months,
                            datasets: [
                                {
                                    label: 'Revenue',
                                    data: revenues,
                                    backgroundColor: colors.revenue.fill,
                                    borderColor: colors.revenue.border,
                                    borderWidth: 2,
                                    borderRadius: 4,
                                    barPercentage: 0.8,
                                    categoryPercentage: 0.9
                                },
                                {
                                    label: 'Cost',
                                    data: costs,
                                    backgroundColor: '#ff6384',
                                    borderColor: '#ff6384',
                                    borderWidth: 1
                                },
                                {
                                    label: 'Profit',
                                    data: profits,
                                    backgroundColor: '#4bc0c0',
                                    borderColor: '#4bc0c0',
                                    borderWidth: 1
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        callback: function(value) {
                                            return '$' + value.toFixed(2);
                                        }
                                    }
                                }
                            },
                            plugins: {
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            return context.dataset.label + ': $' + context.raw.toFixed(2);
                                        }
                                    }
                                },
                                legend: {
                                    display: true,
                                    position: 'top'
                                }
                            }
                        }
                    });
                }
            });

            function printInvoice(url) {
                const printWindow = window.open(url, '_blank');
                printWindow.onload = function () {
                    printWindow.print();
                };
            }
        </script>
    }
</div>