@model IEnumerable<e_commerce.Models.Order>
@{
    ViewData["Title"] = "My Orders";
    Layout = "_Layout";
}

<div class="container mt-4">
    <h2 class="section-title">My Orders</h2>
    <p class="text-muted">Track and manage your orders</p>

    @if (!Model.Any())
    {
        <div class="empty-state">
            <div class="empty-state-icon">ðŸ“¦</div>
            <h3>No Orders Yet</h3>
            <p>You haven't placed any orders yet.</p>
            <a asp-controller="Home" asp-action="Index" class="btn btn-primary">Start Shopping</a>
        </div>
    }
    else
    {
        foreach (var order in Model)
        {
            <div class="order-card">
                <div class="order-header">
                    <div class="order-info">
                        <div class="order-id">Order #@order.Id.Substring(Math.Max(0, order.Id.Length - 8))</div>
                        <div class="order-date">@order.OrderDate.ToString("MMM dd, yyyy HH:mm")</div>
                    </div>
                    <div class="status-badge @order.OrderStatus.ToLower()">
                        @order.OrderStatus
                    </div>
                </div>

                @if (order.OrderStatus == "Delivered" && (DateTime.Now - order.OrderDate).TotalDays > 30)
                {
                    <div class="refund-status-message">
                        <span class="text-muted refund-expired">Refund period expired</span>
                    </div>
                }

                <div class="order-items">
                    @foreach (var item in order.Items)
                    {
                        <div class="order-item">
                            <div class="item-details">
                                <span class="item-name">@item.ProductName</span>
                                <span class="item-quantity">x@(item.Quantity)</span>
                                <span class="item-price">$@item.TotalPrice.ToString("F2")</span>
                                
                                @if (order.OrderStatus == "Delivered" && (DateTime.Now - order.OrderDate).TotalDays <= 30)
                                {
                                    if (item.RefundStatus == "Complete")
                                    {
                                        <span class="refund-badge refund-completed">Refund Completed</span>
                                    }
                                    else if (item.RefundStatus == "Rejected")
                                    {
                                        <span class="refund-badge refund-rejected">Refund Rejected</span>
                                    }
                                    else if (item.RefundRequested)
                                    {
                                        <span class="refund-badge refund-pending">Refund Awaiting</span>
                                    }
                                    else
                                    {
                                        <div class="form-check">
                                            <input class="form-check-input refund-checkbox" type="checkbox" 
                                                   data-order-id="@order.Id" 
                                                   data-product-id="@item.ProductId" 
                                                   name="selectedItems">
                                            <label class="form-check-label">Select for refund</label>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    }
                </div>

                @if (order.OrderStatus == "Delivered" && (DateTime.Now - order.OrderDate).TotalDays <= 30 && 
                     order.Items.Any(i => !i.RefundRequested && string.IsNullOrEmpty(i.RefundStatus)))
                {
                    <div class="refund-action-bar" id="refund-action-@order.Id">
                        <form asp-action="RequestRefund" method="post" class="refund-form">
                            <input type="hidden" name="orderId" value="@order.Id" />
                            <input type="hidden" name="selectedProducts" id="selected-products-@order.Id" />
                            <button type="submit" class="btn-refund" disabled>Request Refund</button>
                        </form>
                    </div>
                }

                <div class="order-total">
                    Total Amount: <strong>$@order.TotalAmount.ToString("F2")</strong>
                </div>
            </div>
        }
    }
</div>

<style>
    .container { 
        max-width: 900px; 
        margin: 20px auto; 
    }
    
    .empty-state { 
        text-align: center; 
        padding: 40px; 
        background: white; 
        border-radius: 10px; 
        box-shadow: 0 2px 4px rgba(0,0,0,0.1); 
    }
    
    .empty-state-icon { 
        font-size: 48px; 
        margin-bottom: 20px; 
    }
    
    .order-card { 
        background: white; 
        border-radius: 10px; 
        padding: 20px; 
        margin-bottom: 20px; 
        box-shadow: 0 2px 4px rgba(0,0,0,0.1); 
    }
    
    .order-header { 
        display: flex; 
        justify-content: space-between; 
        align-items: center; 
        margin-bottom: 15px; 
    }
    
    .order-info .order-id { 
        font-weight: bold; 
    }
    
    .order-info .order-date { 
        color: #666; 
        font-size: 0.9em; 
    }

    .refund-status-message {
        text-align: right;
        margin: 5px 0 15px 0;
        font-style: italic;
        color: #6c757d;
    }

    .status-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: 500;
        display: inline-block;
        min-width: 100px;
        text-align: center;
    }

    .status-badge.delivered {
        background-color: #d4edda;
        color: #155724;
    }

    .status-badge.pending {
        background-color: #e9ecef;
        color: #495057;
    }

    .status-badge.intransit {
        background-color: #cce5ff;
        color: #004085;
    }
    
    .order-items { 
        border-top: 1px solid #eee; 
        border-bottom: 1px solid #eee; 
        padding: 15px 0; 
    }
    
    .order-item {
        display: flex;
        align-items: center;
        padding: 10px 0;
    }
    
    .item-details {
        display: flex;
        align-items: center;
        flex: 1;
        gap: 15px;
    }
    
    .item-name { 
        flex: 1; 
    }
    
    .item-quantity { 
        color: #666;
        min-width: 60px;
    }
    
    .item-price { 
        min-width: 80px;
        text-align: right;
    }

    .refund-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: 500;
        min-width: 140px;
        text-align: center;
    }

    .refund-completed {
        background-color: #b8daff;
        color: #004085;
    }

    .refund-rejected {
        background-color: #f8d7da;
        color: #721c24;
    }

    .refund-pending {
        background-color: #fff3cd;
        color: #856404;
    }

    .form-check {
        margin: 0;
        padding: 0 0 0 1.5rem;
    }

    .refund-action-bar {
        margin-top: 15px;
        padding-top: 15px;
        border-top: 1px solid #eee;
        text-align: right;
    }

    .btn-refund {
        padding: 6px 16px;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: 500;
        background-color: #dc3545;
        color: white;
        border: none;
        min-width: 140px;
        transition: all 0.2s;
    }

    .btn-refund:not(:disabled):hover {
        background-color: #c82333;
    }

    .btn-refund:disabled {
        background-color: #e9ecef;
        cursor: not-allowed;
    }
    
    .order-total { 
        text-align: right; 
        margin-top: 15px; 
        font-size: 1.1em; 
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const checkboxes = document.querySelectorAll('.refund-checkbox');
    
    checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const orderId = this.dataset.orderId;
            const actionBar = document.getElementById(`refund-action-${orderId}`);
            const submitButton = actionBar.querySelector('.btn-refund');
            const selectedProductsInput = document.getElementById(`selected-products-${orderId}`);
            
            // Get all checked checkboxes for this order
            const checkedBoxes = document.querySelectorAll(`.refund-checkbox[data-order-id="${orderId}"]:checked`);
            
            // Enable/disable submit button based on selections
            submitButton.disabled = checkedBoxes.length === 0;
            
            // Update hidden input with selected product IDs
            const selectedProducts = Array.from(checkedBoxes).map(cb => cb.dataset.productId);
            selectedProductsInput.value = selectedProducts.join(',');
        });
    });
});
</script>