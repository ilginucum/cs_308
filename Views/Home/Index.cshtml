@model IEnumerable<e_commerce.Models.Product>
@{
    ViewData["Title"] = "Home Page";
}

<!-- Hero Section -->
<div class="hero-section">
    <img src="~/images/hero-image.jpeg" alt="Bookery Hero Image" class="hero-image">
    <div class="hero-overlay"></div>
    <div class="container">
        <div class="hero-content text-center">
            <h1 class="display-4 fw-bold text-white">Welcome to Bookery</h1>
            <p class="lead text-white mb-4">Find your next unforgettable read</p>
            <a href="#productList" class="btn btn-light btn-lg px-4 smooth-scroll">Explore Books</a>
        </div>
    </div>
</div>

<!-- Search Section -->
<div class="container">
    <div class="mt-4 mb-5">
        <div class="search-section">
            <div class="search-filters">
                <!-- Search Bar Container -->
                <div class="search-bar-container">
                    <!-- Search Box -->
                    <div class="d-flex gap-3 align-items-center">
                        <div class="search-box">
                            <div class="input-group">
                                <input type="text" id="bookSearch" class="form-control" placeholder="Search by Book Name, Author or Description">
                                <button id="searchButton" class="btn btn-search">
                                    Search
                                </button>
                            </div>
                        </div>

                        <!-- Price Sort -->
                        <select id="priceSort" class="form-select">
                            <option value="">Sort by Price</option>
                            <option value="asc">Lowest to Highest</option>
                            <option value="desc">Highest to Lowest</option>
                        </select>

                        <!-- Popularity Sort -->
                        <select id="popularitySort" class="form-select">
                            <option value="">Sort by Popularity</option>
                            <option value="asc">Lowest to Highest</option>
                            <option value="desc">Highest to Lowest</option>
                        </select>

                        <!-- Genre Filter -->
                        <div class="dropdown">
                            <button class="btn btn-filter dropdown-toggle" type="button" id="genreFilterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                Filter by Genre
                            </button>
                            <div class="dropdown-menu genre-dropdown" aria-labelledby="genreFilterDropdown">
                                <div class="genre-options">
                                    @foreach (var genre in ViewBag.Genres)
                                    {
                                        <div class="form-check">
                                            <input class="form-check-input genre-checkbox" type="checkbox" 
                                                id="genre-@genre.Replace(" ", "-")" value="@genre">
                                            <label class="form-check-label" for="genre-@genre.Replace(" ", "-")">
                                                @genre
                                            </label>
                                        </div>
                                    }
                                </div>
                                <div class="dropdown-divider"></div>
                                <div class="filter-actions">
                                    <button id="applyFilters" class="btn btn-primary btn-sm">Apply Filters</button>
                                </div>
                            </div>
                        </div>

                        <!-- Reset Filters -->
                        <button id="resetAllFilters" class="btn btn-outline-secondary">
                            Reset All Filters
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Product List -->
    <div id="productList" class="row">
        @foreach (var product in Model)
        {
            @if (product.Price > 0) // Sadece fiyatı 0'dan büyük olan ürünleri göster
            {
                <div class="col-md-4 mb-4 product-item" 
                    data-name="@product.Name" 
                    data-author="@product.Author" 
                    data-price="@product.Price"
                    data-genre="@product.Genre"
                    data-description="@product.Description"
                    data-popularity="@(ViewBag.ProductPopularity != null && 
                                ViewBag.ProductPopularity.ContainsKey(product.Id) ? 
                                ViewBag.ProductPopularity[product.Id] : 0)">
                    <a href="@Url.Action("ProductDetails", "Product", new { id = product.Id })" 
                    class="text-decoration-none text-dark">
                        <div class="card h-100">
                        @{
                        string imageUrl = !string.IsNullOrEmpty(product.ImagePath) 
                        ? product.ImagePath 
                        : "/images/default-book.jpg";
                        }
                            @if (product.QuantityInStock > 0)
                            {
                                
                            }
                            else
                            {
                                <span class="stock-badge out-of-stock">Out of Stock</span>
                            }
                            <img src="@imageUrl" class="card-img-top" alt="@product.Name">
                            <div class="card-body">
                                <h5 class="card-title">@product.Name</h5>
                                <p class="text-muted">by @product.Author</p>
                                <span class="genre-badge">@product.Genre</span>
                                <p class="card-text mt-3">@product.Description</p>
                                <span class="price-tag">$@product.Price.ToString("F2")</span>
                            </div>
                            @if (product.DiscountedPrice.HasValue)
                            {
                            var discountRate = Math.Round((1 - (product.DiscountedPrice.Value / product.OriginalPrice)) * 100);
                            <div class="discount-badge">
                                <div class="discount-content">
                                    <span class="discount-rate">-@discountRate%</span>
                                    <span class="discount-text">OFF</span>
                                </div>
                            </div>
                            }

                            <style>
                            .discount-badge {
                            position: absolute;
                            top: 10px;
                            right: 10px;
                            background: #5cb85c;
                            background: linear-gradient(135deg, #5cb85c, #4cae4c);
                            padding: 8px 12px;
                            border-radius: 50px;
                            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                            transform: rotate(0deg);
                            transition: transform 0.3s ease;
                            }

                            .discount-badge:hover {
                            transform: rotate(-10deg) scale(1.1);
                            }

                            .discount-content {
                            display: flex;
                            flex-direction: column;
                            align-items: center;
                            line-height: 1;
                            }

                            .discount-rate {
                            color: white;
                            font-weight: bold;
                            font-size: 1.1em;
                            margin-bottom: 2px;
                            }

                            .discount-text {
                            color: rgba(255,255,255,0.9);
                            font-size: 0.7em;
                            text-transform: uppercase;
                            letter-spacing: 1px;
                            }
                            </style>
                        </div>
                    </a>
                </div>
            }
        }
    </div>
</div>

<style>
    /* Hero Section */
    .hero-section {
        width: 100vw;
        position: relative;
        left: 50%;
        right: 50%;
        margin-left: -50vw;
        margin-right: -50vw;
        height: 400px;
        overflow: hidden;
    }

    .hero-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        filter: brightness(0.7);
    }

    .hero-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.3);
    }

    .hero-content {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 100%;
        z-index: 2;
    }

    /* Search Section */
    .search-section {
        background-color: white;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    }

    .search-bar-container {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .search-box {
        width: 250%;
    }

    .filter-row {
        display: flex;
        gap: 0.8rem;
        align-items: center;
        flex-wrap: wrap;
    }

    .form-select {
        min-width: 150px;
        height: 40px;
    }

    .genre-dropdown {
        padding: 1rem;
        min-width: 200px;
    }

    .genre-options {
        max-height: 200px;
        overflow-y: auto;
    }

    .filter-actions {
        padding-top: 0.5rem;
    }

    #applyFilters {
        width: 100%;
        background-color: #be3144;
        border: none;
    }

    #applyFilters:hover {
        background-color: #952735;
    }

    .btn-search, .btn-filter, #resetAllFilters {
    background-color: #be3144;
    color: white;
    border: none;
    padding: 0.5rem 1.5rem;
    }

    .btn-search:hover, .btn-filter:hover, #resetAllFilters:hover {
        background-color: #952735;
        color: white;
    }
    /* Focus durumu için */
    .btn-search:focus, .btn-filter:focus, #resetAllFilters:focus,
    .btn-search.focus, .btn-filter.focus, #resetAllFilters.focus {
        outline: none;
        box-shadow: 0 0 0 0.25rem rgba(190, 49, 68, 0.25) !important;
        background-color: #be3144;
    }

    /* Bootstrap'in varsayılan focus vurgusunu kaldır */
    .btn:focus {
        outline: none;
        box-shadow: none;
    }

    /* Butonlara basıldığında active durumu */
    .btn-search:active, .btn-filter:active, #resetAllFilters:active {
        background-color: #be3144;
        border-color: #be3144;
        box-shadow: 0 0 0 0.25rem rgba(190, 49, 68, 0.25);
    }

    /* Update the filter button to remove any default dropdown styling */
    .btn-filter {
        background-color: #be3144 !important;
        color: white !important;
    }

    /* Reset button specific styles to ensure it matches */
    #resetAllFilters {
        background-color: #be3144;
        color: white;
        border: none;
    }

    /* Product Cards */
    .card {
        border: none;
        border-radius: 15px;
        transition: all 0.4s ease;
        position: relative;
        overflow: hidden;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
    }
    
    .card:hover {
        transform: translateY(-10px);
        box-shadow: 0 15px 30px rgba(0,0,0,0.15);
    }
    
    .card:hover .card-img-top {
        transform: scale(1.05);
        transition: transform 0.4s ease;
    }
    
    .card-img-top {
        height: 300px;
        object-fit: contain;
        padding: 1rem;
        transition: transform 0.4s ease;
    }
    
    /* Stock Badge */
    .stock-badge {
        position: absolute;
        background: #c7001b; 
        top: 10px;
        right: 10px;
        padding: 5px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: bold;
        z-index: 1;
    }
    
    .in-stock {
        background-color: #4CAF50;
        color: white;
    }
    
    .out-of-stock {
        background-color: #c7001b;
        color: white;
    }
    
    /* Price Tag */
    .price-tag {
        background: #be3144;
        color: white;
        padding: 8px 15px;
        border-radius: 25px;
        position: absolute;
        bottom: 15px;
        right: 15px;
        font-weight: bold;
        font-size: 1.1rem;
    }
    
    /* Genre Badge */
    .genre-badge {
        background-color: #f8f9fa;
        color: #be3144;
        border: 1px solid #be3144;
        padding: 4px 10px;
        border-radius: 15px;
        font-size: 0.8rem;
        margin-right: 5px;
        display: inline-block;
    }
    
    /* Gradient Overlay */
    .card::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 50%;
        background: linear-gradient(to top, rgba(255,255,255,1) 0%, rgba(255,255,255,0) 100%);
        pointer-events: none;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .card:hover::after {
        opacity: 1;
    }

    .form-check-input:checked {
    background-color: #be3144;
    border-color: #be3144;
    }

    /* Hover durumunda da aynı rengi korumak için */
    .form-check-input:checked:hover {
        background-color: #be3144;
        border-color: #be3144;
    }

    /* Fokus durumunda kutunun etrafındaki vurguyu da aynı renk yapmak için */
    .form-check-input:focus {
        border-color: #be3144;
        box-shadow: 0 0 0 0.25rem rgba(190, 49, 68, 0.25);
    }

    /* Search box için */
    .form-control:focus {
        border-color: #be3144;
        box-shadow: 0 0 0 0.25rem rgba(190, 49, 68, 0.25);
    }

    /* Dropdown'lar (Sort by Price ve Sort by Popularity) için */
    .form-select:focus {
        border-color: #be3144;
        box-shadow: 0 0 0 0.25rem rgba(190, 49, 68, 0.25);
    }

    @* @media (max-width: 768px) {
        .filter-row {
            flex-direction: column;
            align-items: stretch;
        }

        .form-select, .btn-filter, #resetAllFilters {
            width: 100%;
        }
    } *@
</style>

@section Scripts {
    <script>
        // Smooth scroll
        document.querySelectorAll('.smooth-scroll').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const targetId = this.getAttribute('href');
                const targetElement = document.querySelector(targetId);
                
                if (targetElement) {
                    targetElement.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // Search and filter functionality
        $(document).ready(function() {
            function normalizeText(text) {
                return text.toLocaleLowerCase('tr-TR')
                    .replace(/ı/g, 'i')
                    .replace(/ş/g, 's')
                    .replace(/ç/g, 'c')
                    .replace(/ğ/g, 'g')
                    .replace(/ü/g, 'u')
                    .replace(/ö/g, 'o')
                    .replace(/[^a-z0-9\s]/gi, '')
                    .trim();
            }
            
            function filterAndSortProducts() {
                var bookSearch = normalizeText($('#bookSearch').val()).toLowerCase();
                var priceSort = $('#priceSort').val();
                var popularitySort = $('#popularitySort').val();
                var selectedGenres = $('.genre-checkbox:checked').map(function() {
                    return normalizeText($(this).val().toLowerCase());
                }).get();

                var searchTerms = bookSearch.split(/\s+/);

                $('.product-item').each(function() {
                    var $item = $(this);
                    var name = normalizeText(($item.data('name') || '').toLowerCase());
                    var author = normalizeText(($item.data('author') || '').toLowerCase());
                    var genre = ($item.data('genre') || '').toLowerCase();
                    var description = normalizeText(($item.data('description') || '').toLowerCase());
                    var popularity = parseInt($item.data('popularity')) || 0;
                    
                    var matchesGenres = selectedGenres.length === 0 || 
                        (genre && selectedGenres.includes(genre));
                    
                    var matchesName = searchTerms.every(term => 
                        name.includes(term) || author.includes(term) || description.includes(term)
                    );
                    
                    $item.toggle(matchesName && matchesGenres);
                });

                if (priceSort) {
                    var products = $('.product-item:visible').get();
                    products.sort(function(a, b) {
                        var priceA = parseFloat($(a).data('price'));
                        var priceB = parseFloat($(b).data('price'));
                        return priceSort === 'asc' ? priceA - priceB : priceB - priceA;
                    });
                    $('#productList').html(products);
                } 
                else if (popularitySort) {
                    var products = $('.product-item:visible').get();
                    products.sort(function(a, b) {
                        var popularityA = parseInt($(a).data('popularity')) || 0;
                        var popularityB = parseInt($(b).data('popularity')) || 0;
                        return popularitySort === 'asc' ? popularityA - popularityB : popularityB - popularityA;
                    });
                    $('#productList').empty().append(products);
                }
            }

            // Reset all filters functionality
            // Reset all filters functionality
// Sayfanın ilk yüklenişindeki orijinal sıralamayı saklayalım
        let originalOrder = [];

        $(document).ready(function() {
            // Sayfa yüklendiğinde orijinal sıralamayı kaydet
            originalOrder = $('#productList .product-item').toArray();

            // Reset all filters functionality
            $('#resetAllFilters').on('click', function() {
                // Reset search input
                $('#bookSearch').val('');
                
                // Reset all dropdowns
                $('#priceSort').val('');
                $('#popularitySort').val('');
                
                // Close and reset genre dropdown
                $('.dropdown-menu').removeClass('show');
                $('.genre-checkbox').prop('checked', false);
                
                // Tüm ürünleri göster
                $('.product-item').show();
                
                // Orijinal sıralamaya geri dön
                $('#productList').empty();
                originalOrder.forEach(function(item) {
                    $('#productList').append(item);
                });
            });

            // Diğer event handler'lar...
        });

            $('#applyFilters').on('click', function() {
                filterAndSortProducts();
                $('.dropdown-menu').removeClass('show');
            });
            
            $('#searchButton').on('click', filterAndSortProducts);
            $('#priceSort').on('change', filterAndSortProducts);
            $('#popularitySort').on('change', filterAndSortProducts);
            
            $('#bookSearch').on('keypress', function(e) {
                if (e.which === 13) {
                    filterAndSortProducts();
                }
            });
        });
    </script>
}