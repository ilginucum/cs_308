@model IEnumerable<e_commerce.Models.Product>
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <div class="hero-content">
        <div class="logo-container">
            <img src="/images/bookery-logo-black.png" alt="Bookery - Discover Worlds Within Words" class="hero-logo">
        </div>
        <p class="hero-text">Discover your next favorite book</p>
    </div>
</div>

<style>
    .text-center {
        background: linear-gradient(135deg, #be3144 0%, #952735 100%);
        padding: 0.3rem;
        margin-bottom: 0.5rem;
        border-radius: 0 0 20px 20px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        color: white;
    }

    .logo-container {
        margin: 0.2rem 0; 
    }

    .hero-logo {
        max-width: 400px;
        height: auto;
        margin: 0 auto;
        display: block;
    }

    .hero-content {
        max-width: 800px;
        margin: 0 auto;
        padding: 0; 
    }

    .hero-text {
        font-size: 1.2rem;
        color: rgba(255, 255, 255, 0.9);
        margin-bottom: 0.5rem;
    }
</style>

<div class="mt-4 search-section">
    <h2 class="section-title">Our Products</h2>
    
    <div class="search-filters">
        <div class="search-bar-container">
            <!-- Search Box -->
            <div class="search-box">
                <div class="input-group">
                    <input type="text" id="bookSearch" class="form-control" placeholder="Search by Book Name or Author">
                    <button id="searchButton" class="btn btn-search">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>

            <!-- Filter Options -->
            <div class="filter-options">
                <!-- Price Sort Dropdown -->
                <select id="priceSort" class="form-select">
                    <option value="">Sort by Price</option>
                    <option value="asc">Lowest to Highest</option>
                    <option value="desc">Highest to Lowest</option>
                </select>

                <!-- Popularity Sort Dropdown -->
                <select id="popularitySort" class="form-select">
                    <option value="">Sort by Popularity</option>
                    <option value="asc">Lowest to Highest</option>
                    <option value="desc">Highest to Lowest</option>
                </select>

                <!-- Genre Filter Dropdown -->
                <div class="dropdown">
                    <button class="btn btn-filter dropdown-toggle" type="button" id="genreFilterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        Filter by Genre
                    </button>
                    <div class="dropdown-menu genre-dropdown" aria-labelledby="genreFilterDropdown">
                        <div class="genre-options">
                            @foreach (var genre in ViewBag.Genres)
                            {
                                <div class="form-check">
                                    <input class="form-check-input genre-checkbox" type="checkbox" 
                                           id="genre-@genre.Replace(" ", "-")" value="@genre">
                                    <label class="form-check-label" for="genre-@genre.Replace(" ", "-")">
                                        @genre
                                    </label>
                                </div>
                            }
                        </div>
                        <div class="dropdown-divider"></div>
                        <div class="filter-actions">
                            <button id="applyFilters" class="btn btn-primary btn-sm">Apply Filters</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .search-section {
        background-color: white;
        padding: 2rem;
        border-radius: 16px;
        box-shadow: 0 2px 20px rgba(0,0,0,0.06);
        margin-bottom: 3rem;
    }

    .section-title {
        font-size: 2.2rem;
        font-weight: 600;
        color: #2d3436;
        margin-bottom: 1.5rem;
        position: relative;
        padding-bottom: 1rem;
    }

    .section-title:after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 60px;
        height: 4px;
        background: linear-gradient(135deg, #be3144 0%, #952735 100%);
        border-radius: 2px;
    }

    .search-bar-container {
        display: flex;
        gap: 1rem;
        align-items: center;
        flex-wrap: wrap;
    }

    .search-box {
        flex: 1;
        min-width: 200px;
    }

    .filter-options {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .input-group {
        height: 40px;
    }

    .form-select, .btn-filter {
        height: 40px;
        padding: 0 1rem;
        font-size: 0.9rem;
        border-radius: 8px;
        background-color: #f8f9fa;
        border: 1px solid #e0e0e0;
    }

    .btn-search {
        padding: 0 1rem;
        background-color: #be3144;
        color: white;
        border: none;
    }

    .btn-search:hover {
        background-color: #952735;
    }

    .btn-filter {
        white-space: nowrap;
        background-color: #f8f9fa;
        color: #333;
        border: 1px solid #e0e0e0;
    }

    .genre-dropdown {
        padding: 1rem;
        min-width: 200px;
        max-height: 300px;
        overflow-y: auto;
    }

    .genre-options {
        max-height: 200px;
        overflow-y: auto;
    }

    .genre-options .form-check {
        margin-bottom: 0.5rem;
    }

    .filter-actions {
        padding: 0.5rem;
        text-align: right;
    }

    #applyFilters {
        width: 100%;
    }

    .form-check-label {
        cursor: pointer;
    }

    /* Custom scrollbar for dropdowns */
    .genre-options::-webkit-scrollbar {
        width: 4px;
    }

    .genre-options::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .genre-options::-webkit-scrollbar-thumb {
        background: #be3144;
        border-radius: 4px;
    }
</style>

<div id="productList" class="row">
    @foreach (var product in Model)
    {
        <div class="col-md-4 mb-3 product-item" 
             data-name="@product.Name" 
             data-author="@product.Author" 
             data-price="@product.Price"
             data-genre="@product.Genre"
             data-popularity="@(ViewBag.ProductPopularity != null && ViewBag.ProductPopularity.ContainsKey(product.Id) ? ViewBag.ProductPopularity[product.Id] : 0)">
            <a href="@Url.Action("ProductDetails", "Product", new { id = product.Id })" class="text-decoration-none text-dark">
                <div class="card h-100">
                    @{
                        string imageUrl = product.Name switch
                        {
                            "Suç ve Ceza" => "/images/crime-and-punishment.jpg",
                            "Anna Karenina" => "/images/anna-karenina.jpg",
                            "Romeo ve Juliet" => "/images/romeo-and-juliet.jpg",
                            "Brave New World" => "/images/brave-new-world.jpg",
                            "Notre Dame'ın Kamburu" => "/images/Notre-Dame.jpg",
                            "Dune" => "/images/Dune.jpg",
                            "Frankenstein" => "/images/frankenstein.jpg",
                            "babam beni şahdamarımdan öptü" => "/images/Babam-beni-sah.jpg",
                            "Pride and Prejudice" => "/images/Pride-prejiduce.jpg",
                            "Little Women" => "/images/Little-women.jpg",
                            _ => "/images/default-book.jpg"
                        };
                    }
                    <img src="@imageUrl" class="card-img-top" alt="@product.Name">
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">@product.Description</p>
                        <p class="card-text">Price: $@product.Price</p>
                        <p class="card-text">In Stock: @product.QuantityInStock</p>
                        <p class="card-text">Author: @product.Author</p>
                        @if (!string.IsNullOrEmpty(product.Genre))
                        {
                            <p class="card-text">Genre: @product.Genre</p>
                        }
                    </div>
                </div>
            </a>
        </div>
    }
</div>

<style>
    .card {
        border: none;
        border-radius: 12px;
        transition: all 0.3s ease;
        box-shadow: 0 2px 15px rgba(0,0,0,0.05);
        overflow: hidden;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
    }

    .card-body {
        padding: 2rem;
    }

    .card-title {
        color: #2d3436;
        font-size: 1.4rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .card-img-top {
        width: 100%;
        height: 250px;  
        object-fit: contain;  
        transition: transform 0.3s ease;
        padding: 1rem;  
        background-color: #fff;  
    }

    .card:hover .card-img-top {
        transform: scale(1.03);
    }

    .btn-primary {
        background: linear-gradient(135deg, #be3144 0%, #952735 100%);
        border: none;
        box-shadow: 0 4px 15px rgba(190, 49, 68, 0.2);
    }

    .btn-primary:hover {
        background: linear-gradient(135deg, #952735 0%, #7a1f2d 100%);
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(190, 49, 68, 0.3);
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function() {
            function normalizeText(text) {
                return text.toLocaleLowerCase('tr-TR')
                    .replace(/ı/g, 'i')
                    .replace(/ş/g, 's')
                    .replace(/ç/g, 'c')
                    .replace(/ğ/g, 'g')
                    .replace(/ü/g, 'u')
                    .replace(/ö/g, 'o')
                    .replace(/[^a-z0-9\s]/gi, '')
                    .trim();
            }
            
            function filterAndSortProducts() {
                var bookSearch = normalizeText($('#bookSearch').val()).toLowerCase();
                var priceSort = $('#priceSort').val();
                var popularitySort = $('#popularitySort').val(); // Popularity sıralaması için değer al
                var selectedGenres = $('.genre-checkbox:checked').map(function() {
                    return normalizeText($(this).val().toLowerCase());
                }).get();

                var searchTerms = bookSearch.split(/\s+/);

                $('.product-item').each(function() {
                    var $item = $(this);
                    var name = normalizeText(($item.data('name') || '').toLowerCase());
                    var author = normalizeText(($item.data('author') || '').toLowerCase());
                    var genre = ($item.data('genre') || '').toLowerCase();
                    var popularity = parseInt($item.data('popularity')) || 0;
                    
                    
                    var matchesGenres = selectedGenres.length === 0 || 
                        (genre && selectedGenres.includes(genre));
                    
                    var matchesName = searchTerms.every(term => 
                        name.includes(term) || author.includes(term)
                    );
                    
                    var showProduct = matchesName && matchesGenres;
                    
                    $item.toggle(showProduct);
                });

                if (priceSort) {
                    var products = $('.product-item:visible').get();
                    products.sort(function(a, b) {
                        var priceA = parseFloat($(a).data('price'));
                        var priceB = parseFloat($(b).data('price'));
                        return priceSort === 'asc' ? priceA - priceB : priceB - priceA;
                    });
                    $('#productList').html(products);
                } 
                else if (popularitySort) { // Popularity sıralaması
                    var products = $('.product-item:visible').get();
                    products.sort(function(a, b) {
                        var popularityA = parseInt($(a).data('popularity')) || 0;
                        var popularityB = parseInt($(b).data('popularity')) || 0;
                        return popularitySort === 'asc' ? popularityA - popularityB : popularityB - popularityA;
                    });
                    $('#productList').empty();
                    products.forEach(function(product) {
                        $('#productList').append(product);
                    });
                    
                }
            }

            // Event handlers
            $('#applyFilters').on('click', function() {
                filterAndSortProducts();
                // Close the dropdown after applying filters
                $('.dropdown-menu').removeClass('show');
            });
            
            $('#searchButton').on('click', filterAndSortProducts);
            $('#priceSort').on('change', filterAndSortProducts);
            $('#popularitySort').on('change', filterAndSortProducts);
            
            $('#bookSearch').on('keypress', function(e) {
                if (e.which === 13) {
                    filterAndSortProducts();
                }
            });
        });
    </script>
}
